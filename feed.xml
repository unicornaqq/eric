<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="/eric/feed.xml" rel="self" type="application/atom+xml" /><link href="/eric/" rel="alternate" type="text/html" /><updated>2020-05-29T03:23:42+00:00</updated><id>/eric/feed.xml</id><title type="html">Eric’s Study Notes</title><subtitle>Learning notes for AI, Machine Learning, Knowledge Management, Study Efficiency.</subtitle><entry><title type="html">Python Multiprocessing</title><link href="/eric/2020/05/29/python-multiprocessing.html" rel="alternate" type="text/html" title="Python Multiprocessing" /><published>2020-05-29T00:00:00+00:00</published><updated>2020-05-29T00:00:00+00:00</updated><id>/eric/2020/05/29/python-multiprocessing</id><content type="html" xml:base="/eric/2020/05/29/python-multiprocessing.html">&lt;h1 id=&quot;how-to-handle-connections-for-multiprocessing&quot;&gt;How to handle connections for multiprocessing&lt;/h1&gt;

&lt;p&gt;I am working on a case which needs to crawl the machines in our lab - there should be 1000+ systems in the lab - check the health status of the systems, and record the current status of the machine into the DB. For each crawl, once I get the status of the system, I have to compare the current status with previous status record in the DB.&lt;/p&gt;

&lt;p&gt;Some interaction with the systems are needed, now, I use the ssh to run some command remotely to get the status of the system, which is time consuming (via the network). And the query to the DB to get previous status from the DB is also time consuming.&lt;/p&gt;

&lt;p&gt;The communication with different systems are independent with each other, so, I tried to use the multiprocessing module provided by python, and now, I have a question that, how to sync the connection usage between so many processes.&lt;/p&gt;

&lt;p&gt;At the very beginning, I tried with multiprocessing with the mysql connection pool provided by the mysql.connector.pooling, at that time, I thought, it would be some kind of MxN combination. M is the number of processes, and N is the number of connections in the pool. M processes can communicate with different systems in parallel, while the N connections (pre-established) can be shared by those M processes.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Example 1:&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;240&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CON_POOL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mcp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mypool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CON_POOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the script is triggered, I noticed that, the actual number of connections to the MySQL DB is larger than the number of connections in the pool. This will cause the actual connection number to reach the limitation of the MySQL DB, and hit the ‘Too Many Connections’ exception. The function CON_POOL is inherited by the subprocess, that is why the connection number keep increasing. Allocation Pool doesn’t mean the connection established immediately for those 32 connections.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Example 2:&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#conn_pool = mcp(32, &quot;mypool&quot;, **config)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For example 2:&lt;/p&gt;

&lt;p&gt;120 processes created at once and 120 connections are created at once in the init function. But, as the  script runs, the connection number dropped to &amp;lt; 10, why? And even hit the error as below finally. Can we say each connection used in the func is one of those 120 established connections?&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;multiprocessing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoteTraceback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
Traceback (most recent call last):
  File &quot;/usr/lib64/python3.6/multiprocessing/pool.py&quot;, line 119, in worker
    result = (True, func(*args, **kwds))
  File &quot;/usr/lib64/python3.6/multiprocessing/pool.py&quot;, line 44, in mapstar
    return list(map(*args))
  File &quot;./refresh_db_mt_common.py&quot;, line 162, in func
    cursor = cnx.cursor()
  File &quot;/usr/lib64/python3.6/site-packages/mysql/connector/connection_cext.py&quot;, line 541, in cursor
    raise errors.OperationalError(&quot;MySQL Connection not available.&quot;)
mysql.connector.errors.OperationalError: MySQL Connection not available.
&quot;&quot;&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This error is caused by the &lt;em&gt;cnx.close()&lt;/em&gt; at the end of the func. 120 db connections are created by adding the connection creation login in the init() function. And later on, as one of the worker finished the assigned job, it goes to the end of the func(), and it close the connection. But since the worker will be used to handle other task in the backlog, but the question is, the per process connection is closed by previous task operation, which cause the current process has no connection at all, that is why it hit the connection not variable issue.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When the init function is called?
It is called only once when each worker process is created.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Example 3&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;conn_pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn_pool&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn_pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mcp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mypool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the best option.&lt;/p&gt;

&lt;p&gt;Create the pool with 1 connection inside in the init function, that means 120 connection pool is created, and even we close the connection at the end of the func, the connection pool is still there, and can be used by the subprocess to handle the following up tasks with the same connection from the same pool.&lt;/p&gt;

&lt;p&gt;So, the question is, what is the best way to handle my use case, how to parallelize the DB connection from multiple processes with efficiency?&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&quot;https://stackoverflow.com/questions/28638939/python3-x-how-to-share-a-database-connection-between-processes&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;which can probably give me insight and correct my bad thought:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DB connection Pool is only helpful for multi-threads within a single process.&lt;/li&gt;
  &lt;li&gt;Don’t pass the DB connection Pool around the processes.&lt;/li&gt;
  &lt;li&gt;Each process should use its own connection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, I changed my mind, and created a dedicate connection for each process. Due to limitation of the number that can be supported by the DB, I limit the number of processes as well.&lt;/p&gt;

&lt;p&gt;No, the strange behavior due to the out-of-sync of the DB operation is gone.&lt;/p&gt;

&lt;p&gt;Another problem that I have hit is regarding the &lt;em&gt;initializer&lt;/em&gt; of the &lt;em&gt;Pool&lt;/em&gt;.  I used to put the connection establishment logic in the initializer of the constructor of the Pool, but, found that the connection created in the initializer is not per process, all the processes share the same connection. I found this by checking the connection numbers in the MySQL DB.&lt;/p&gt;</content><author><name></name></author><summary type="html">How to handle connections for multiprocessing</summary></entry><entry><title type="html">Arkit Project Abc</title><link href="/eric/2019/09/12/arkit-project-abc.html" rel="alternate" type="text/html" title="Arkit Project Abc" /><published>2019-09-12T00:00:00+00:00</published><updated>2019-09-12T00:00:00+00:00</updated><id>/eric/2019/09/12/arkit-project-abc</id><content type="html" xml:base="/eric/2019/09/12/arkit-project-abc.html">&lt;p&gt;今天我们来看一下，不同的模型会提供什么样的接口供我们使用。&lt;/p&gt;

&lt;p&gt;我选中的模型是YOLOv3，之所以选择这个模型完全是被它的外观吸引过去的。所以就想看看那个外观和模型本身有没有关系。&lt;/p&gt;

&lt;p&gt;还记得那部美剧吗？《疑犯追踪》，没错，就是它了，里边的一些桥段显示出来的场景就是这个样子的。&lt;/p&gt;

&lt;p&gt;我打开了上次的那个空的默认的arkit的项目，并且通过拖拽的方式往里边添加了YOLOv3的模型，我注意到里边为这个模型生成了新的代码。&lt;/p&gt;

&lt;p&gt;我对比了两个模型自动生成的代码，发现了他们内部的结构和提供的接口基本都一样，但是接口所能接受的参数类型以及接口内部具体的实现还是有差别的。&lt;/p&gt;

&lt;p&gt;所以，现在我要做的事情就是替换原来在项目Gesture-Recognition-101-CoreML-ARKit中自带的模型example_5s0_hand_model,取而代之的是YOLOv3。&lt;/p&gt;

&lt;p&gt;我需要做的事情就是适配新的模型。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一旦我替换完模型之后，项目会立刻报错，说原来的模型找不到了，很正常。找到模型使用的地方，直接替换名字。&lt;/li&gt;
  &lt;li&gt;因为YOLOv3只有12.0以上的版本才支持，所以继续抱怨版本的问题，所以，我就调整了target的版本到12.0. build一下子成功了。&lt;/li&gt;
  &lt;li&gt;因为没check模型的输出结果，直接导致数组访问越界。所以尝试添加如下代码。
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the request is: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;找到一个很好的例子可以获得我们想要的效果：https://github.com/tucan9389/ObjectDetection-CoreML.git&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;类型转换 as?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是问题在于要使用这个模型需要使用所谓的boxview，而原来我们的这个项目里边是没有boxview这个东西的，所以现在不得不面对storyboard和view的相关知识，这里有个扫盲性质的介绍，可以参考一下。https://juejin.im/post/5a6b173c6fb9a01cbf3891b7&lt;/p&gt;

&lt;h3 id=&quot;做了以下几件事情总算把程序调出来了&quot;&gt;做了以下几件事情，总算把程序调出来了&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;原来的工程被我破坏的太厉害，以至于原来的故事板都乱了，所以我就新建了一个arkit的工程，从头开始&lt;/li&gt;
  &lt;li&gt;模仿上述github上的项目，在新创建的工程的故事板上添加了相关的组件，包括
    &lt;ul&gt;
      &lt;li&gt;一个View
        &lt;ul&gt;
          &lt;li&gt;重新命名这个view为boxes view （名字不指定，不知道有没有问题）&lt;/li&gt;
          &lt;li&gt;将其对应的class指定为上面github项目中创建的DrawingBoundingBoxView。（这一部分的实现还要继续看）
            &lt;ul&gt;
              &lt;li&gt;这个类的主要作用就是将识别出来的物体用方框框起来&lt;/li&gt;
              &lt;li&gt;在方框上加上相应的label&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;一个Table View
        &lt;ul&gt;
          &lt;li&gt;table view的图层和scene view对应的图层是重叠的，所以就存在需要把table view调到前台的需要&lt;/li&gt;
        &lt;/ul&gt;

        &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bringSubviewToFront&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boxesView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;table里的cell。在我运行项目的时候，总是发生uncached exception：
        &lt;blockquote&gt;
          &lt;p&gt;tableView:numberOfRowsInSection:]: unrecognized selector sent to instance&lt;/p&gt;
        &lt;/blockquote&gt;

        &lt;p&gt;一直不太明白这个错误的含义，很是抓狂，从字面的意思来看，根本看不出来是什么意思。
  参考了开发文档之后，终于得解。 
  我们在前面构建故事板的时候，指定了table view的data source是viewController，所以作为data source的viewController必须要遵从UITableViewDataSource的协议/规定/需求，开发文档中指出，实现UITableViewDataSource的类必须要实现两个方法，即下面代码片段中，提到的两个方法。&lt;/p&gt;

        &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predictions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeueReusableCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;InfoCell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rectString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predictions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boundingBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;confidence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predictions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confidence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;confidenceString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%.3f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confidence&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*Math.sigmoid(confidence)*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

          &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predictions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;N/A&quot;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detailTextLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rectString&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confidenceString&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;blockquote&gt;
          &lt;p&gt;UITableViewDataSource的介绍
   它是一个protocol
   这里不得不提及protocol的概念：
   protocol就像是一个蓝图，它定义了需求。
   一个类，数据结构可以实现这个需求。&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;事实证明模型并不能决定显示出来的效果是什么样子具体显示的效果是要通过不同的view来控制的&quot;&gt;事实证明：模型并不能决定显示出来的效果是什么样子。具体显示的效果是要通过不同的view来控制的。&lt;/h3&gt;
&lt;p&gt;在本例中，通过boxview（UIView）实现了我们想要的带框框和标签的效果。我们将其和viewController关联起来，然后在ViewController中将数据提供给boxview，让它去负责数据的呈现。&lt;/p&gt;</content><author><name></name></author><summary type="html">今天我们来看一下，不同的模型会提供什么样的接口供我们使用。</summary></entry><entry><title type="html">Arkit Project Ar Coreml 3</title><link href="/eric/2019/08/31/arkit-project-ar-coreml-3.html" rel="alternate" type="text/html" title="Arkit Project Ar Coreml 3" /><published>2019-08-31T00:00:00+00:00</published><updated>2019-08-31T00:00:00+00:00</updated><id>/eric/2019/08/31/arkit-project-ar-coreml-3</id><content type="html" xml:base="/eric/2019/08/31/arkit-project-ar-coreml-3.html">&lt;p&gt;今天我们来研究下另外一个项目的代码： Gesture-Recognition-101-CoreML-ARKit。&lt;/p&gt;

&lt;p&gt;这个项目的主要功能：捕捉手势，在屏幕的中央来显示对应的动画手势。&lt;/p&gt;

&lt;h3 id=&quot;viewcontroller&quot;&gt;ViewController&lt;/h3&gt;

&lt;p&gt;我们还是从类ViewController的实现开始讲起。&lt;/p&gt;

&lt;p&gt;在这个类中，我们需要如下的几个要素：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ARSCNView&lt;/li&gt;
  &lt;li&gt;dispatchqueue&lt;/li&gt;
  &lt;li&gt;request&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;viewDidload&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;viewWillAppear&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;viewWillDisappear&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;renderer&lt;/li&gt;
  &lt;li&gt;loopCoreMLUpdate&lt;/li&gt;
  &lt;li&gt;updateCoreML&lt;/li&gt;
  &lt;li&gt;classificationCompleteHandler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上函数中，加粗的是重新实现了父类的方法，实现定制化。其他的函数都是该类内部函数，供其自己使用。&lt;/p&gt;

&lt;h3 id=&quot;arscnview&quot;&gt;ARSCNView&lt;/h3&gt;
&lt;p&gt;这个是arkit项目的必备品。
结合我们之前看过的几个项目，我们可以大概总结一下对这个对象进行的操作。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;指定delegate，将其关联到ViewController&lt;/li&gt;
  &lt;li&gt;关联指定的场景，在ARkit中，我们使用的几乎都是SCNScene。&lt;/li&gt;
  &lt;li&gt;启动/终止session。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;scnscene&quot;&gt;SCNScene&lt;/h4&gt;
&lt;p&gt;这是一个3d场景，3d场景中的物体对象是以node的形式组织起来的。&lt;/p&gt;

&lt;h3 id=&quot;dispatchqueue&quot;&gt;dispatchqueue&lt;/h3&gt;
&lt;p&gt;本章，我们将详细讨论下dispatchqueue，因为它在arkit+coreml的项目中很重要。&lt;/p&gt;

&lt;p&gt;在apple的开发网站上，dispatchqueue的定义是这样子的。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;An object that manages the execution of tasks serially or concurrently on your app’s main thread or on a background thread.
一个对象，它可以管理任务的执行，可以是顺序执行，也可以是并发执行，任务是在app的主线程或者后台线程上执行的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;该队列的几个特性&quot;&gt;该队列的几个特性&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;像所有的队列一样，它是先进先出的。&lt;/li&gt;
  &lt;li&gt;提交给该队列的任务是由系统提供的一个线程池来执行
    &lt;ul&gt;
      &lt;li&gt;除了代表你的app的主线程的那个dispatchqueue之外，系统不能保证你提交的任务是给哪个线程去执行的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;需要注意的是：不要在主线程上顺序的执行一个任务，否则会造成死锁。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;既然是线程池，那么就会面临线程池中的线程资源被用光的问题，那么如何才能避免呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果你的任务想并发执行，那么尽量确保你的任务不要block其所在的线程
    &lt;ul&gt;
      &lt;li&gt;因为线程一旦被堵住，系统就会使用线程池中的其他线程来执行queue中的其他任务。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;尽量不要给每个类创建过多的私有并发dispatchqueue，如果可能的话，尽量将任务提交给全局并发dispatchqueue。
    &lt;ul&gt;
      &lt;li&gt;那样既可以保证队列的顺序化行为，同时又不至于引发线程资源紧张的问题。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以在我们这个项目中，创建了一个私有的queue。&lt;/p&gt;

&lt;h3 id=&quot;request&quot;&gt;request&lt;/h3&gt;
&lt;p&gt;这是一个request的数组，里边放的呢是VNRequest，VNRequest是个基类，是不能被实例化的。但是它的各种子类是可以被实例化的，在本项目中用到的VNCoreMLRequest就是其中的一种，它是VNImageBasedRequest的子类。所以这几个类之间的关系是。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD
A[VNCoreMLRequest] --&amp;gt; |继承| B(VNImageBasedRequest)
B --&amp;gt; |继承| C[VNRequest]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;VNCoreMLRequest的主要功能就是使用模型进行预测，并将结果返回。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;viewdidload&quot;&gt;viewDidLoad&lt;/h3&gt;
&lt;p&gt;视角/视图加载完成之后会调用这个函数，那么在这个函数中会做什么事情呢？&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;调用父类的同名函数&lt;/li&gt;
  &lt;li&gt;将视图的delegate设置为当前的viewController&lt;/li&gt;
  &lt;li&gt;为视图创建场景&lt;/li&gt;
  &lt;li&gt;选择模型&lt;/li&gt;
  &lt;li&gt;创建VNCoreMLRequest
    &lt;ul&gt;
      &lt;li&gt;指定模型&lt;/li&gt;
      &lt;li&gt;指定结果处理函数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;开始模型处理的循环&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;函数loopcoremlupdate&quot;&gt;函数loopCoreMLUpdate&lt;/h3&gt;
&lt;p&gt;这个函数做的事情从代码表面来看很简单，它给dispatchqueue提交了一个任务。任务是以代码块的形式提交的。在该代码块中，&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;触发request来使用模型处理数据
    &lt;ul&gt;
      &lt;li&gt;在本项目中，就是相机截取到的image&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;递归的调用自己，使得循环继续。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;正如前面提到的，在本函数中，使用的async的方式向dispatchQueue提交任务，之所以如此，是因为在使用模型来处理相机截取的image是需要花时间的，同步执行的话势必会将线程堵死，此时的表现就是视角中的图片死掉了。&lt;/p&gt;

&lt;p&gt;既然是异步处理，那自然需要提供在模型处理完数据之后的处理函数。该处理函数在定义创建request的时候就已经指定好了。&lt;/p&gt;

&lt;h3 id=&quot;结果处理函数&quot;&gt;结果处理函数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;读取在request的结果中保存着的模型处理的结果
    &lt;ul&gt;
      &lt;li&gt;根据模型的不同，返回的内容也会不同，这个是由模型决定的&lt;/li&gt;
      &lt;li&gt;在本项目中，模型是用来进行分类的，所有处理的结果当然就是模型从当前的图像中识别出来的物体。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;将模型处理结果按照你自己想要的方式进行拼接，处理。&lt;/li&gt;
  &lt;li&gt;渲染你的结果&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;结果的最终渲染&quot;&gt;结果的最终渲染&lt;/h3&gt;
&lt;p&gt;结果的渲染是提交给全局的main dispatchQueue进行处理的，而且是以异步的方式（这主要是为了防止死锁）。注意，此处提交的也是一个序列化的代码块。&lt;/p&gt;

&lt;p&gt;所以这里有两个queue，一个queue是私有queue，专门用来处理request。一个是全局的主queue，这个queue专门用来在拿到了处理结果之后，进行结果的渲染。&lt;/p&gt;

&lt;p&gt;在拿到了处理结果之后，将额外处理完的文字图像赋值给了两个特殊的对象，debugTextView和textOverlay。&lt;/p&gt;

&lt;p&gt;开始的时候，不是很理解，问题在于，我这里只是做了赋值，那什么时候显示到屏幕上了，是不是需要另外去渲染。后来发现，其实并不需要，特殊之处就在于debugTextView和textOverlay就像dock一样，它是一直在屏幕上的。我们在后期给他们赋值会直接显示在dock中，不需要另外的渲染。&lt;/p&gt;

&lt;p&gt;至此，项目研究完毕。&lt;/p&gt;

&lt;h3 id=&quot;后续&quot;&gt;后续&lt;/h3&gt;
&lt;p&gt;在后续的章节会再分析一两个项目，弄清楚要实现一个AR+CoreML要实现哪些功能/函数。
另外，研究一下不同的模型对应的接口，看看他们之间的异同之处，为后续将自己训练的模型融入到app中捉准备。&lt;/p&gt;</content><author><name></name></author><summary type="html">今天我们来研究下另外一个项目的代码： Gesture-Recognition-101-CoreML-ARKit。</summary></entry><entry><title type="html">Arkit Project Ar Coreml</title><link href="/eric/2019/08/29/arkit-project-ar-coreml.html" rel="alternate" type="text/html" title="Arkit Project Ar Coreml" /><published>2019-08-29T00:00:00+00:00</published><updated>2019-08-29T00:00:00+00:00</updated><id>/eric/2019/08/29/arkit-project-ar-coreml</id><content type="html" xml:base="/eric/2019/08/29/arkit-project-ar-coreml.html">&lt;h3 id=&quot;arkit和coreml的组合&quot;&gt;arkit和coreml的组合&lt;/h3&gt;
&lt;p&gt;这个是另外一个arkit的项目代码，这个项目的特别之处在于它结合了arkit和coreml两个元素，所以相对之前分析的那个纯arkit的项目而言，负责度增加了不少。&lt;/p&gt;

&lt;h3 id=&quot;函数调用关系&quot;&gt;函数调用关系&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD
A[视图加载完毕] --&amp;gt;B[创建新的场景]
B --&amp;gt; C[选择模型]
C --&amp;gt; D[使用选择的模型来创建coreml req, 同时指定分类完成时的处理函数]
D --&amp;gt; E[将request句柄保存下来,供后续使用]
E --&amp;gt; F[开始截取图片并进行coreml分析的大循环]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个循环的逻辑很简单，它使用了dispatchqueue，通过async的方式往里边添加事务。该循环中最重要的就是函数：updateCoreML。&lt;/p&gt;

&lt;h3 id=&quot;updatecoreml&quot;&gt;updateCoreML&lt;/h3&gt;
&lt;p&gt;该函数截取每一帧图像，然后调用前面创建的request。这个request就是交给模型去处理了，细节我们这边先跳过，实际的操作就是利用模型进行预测和分类。该requst处理完之后会产生结果，供后续的处理。&lt;/p&gt;

&lt;h3 id=&quot;classificationcompletehandler&quot;&gt;classificationCompleteHandler&lt;/h3&gt;
&lt;p&gt;模型处理妥当，后续的事情就交友这个函数来处理了。
它的处理也很简单，分为下面几个步骤：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在拿到结果之后，检查有无错误&lt;/li&gt;
  &lt;li&gt;将模型返回的结果进行拼接，方便后续的显示处理&lt;/li&gt;
  &lt;li&gt;将处理完的结果通过main这个dispatchqueue，将内容打印在屏幕上&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">arkit和coreml的组合 这个是另外一个arkit的项目代码，这个项目的特别之处在于它结合了arkit和coreml两个元素，所以相对之前分析的那个纯arkit的项目而言，负责度增加了不少。</summary></entry><entry><title type="html">Arkit Project Go Through</title><link href="/eric/2019/08/29/arkit-project-go-through.html" rel="alternate" type="text/html" title="Arkit Project Go Through" /><published>2019-08-29T00:00:00+00:00</published><updated>2019-08-29T00:00:00+00:00</updated><id>/eric/2019/08/29/arkit-project-go-through</id><content type="html" xml:base="/eric/2019/08/29/arkit-project-go-through.html">&lt;h3 id=&quot;起点&quot;&gt;起点&lt;/h3&gt;

&lt;p&gt;在打开这个应用的时候，可以看到一架飞机，那总归是一个图片，一般来说对于一个软件工程来讲，这类软件要用到的图片总归是放在资源文件夹中的。在这个新开的项目中，有个叫art.scnassets的文件夹，就它的字面意义来看，这个应该就是专门存放场景资料的文件夹。&lt;/p&gt;

&lt;p&gt;在这个目录中，有一个叫ship.scn的文件。我就用这个文件名去搜索，看是哪块代码使用了这个场景资源。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Create a new scene&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;art.scnassets/ship.scn”)!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;scene&quot;&gt;Scene&lt;/h3&gt;
&lt;p&gt;上面的这段代码创建了一个SCNScene的对象，这个对象Scenekit中的一部分，用来描述一个3d场景。这里的named，制定了我们需要在image中寻找的文件的名字，关于named到底是什么意思，后续还需要在研究一下。&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;named是什么意思？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;viewcontroller&quot;&gt;ViewController&lt;/h3&gt;
&lt;p&gt;创建scene的代码就在&lt;strong&gt;ViewController&lt;/strong&gt;这个类中，所有接下来我们就来看一下这个类的内容。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARSCNViewDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//该类有个成员变量：sceneView，&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//注意它的类别是ARSCNView，我们在后面会重点讨论这个类的情况。&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARSCNView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//这里的super指的是UIViewController&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//而且这个函数是在-loadView之后调用&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;//设置当前view（ARSCNView）的delegate&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//将其设置为当前的ViewController，这就是为什么ViewController也要实现ARSCNViewDelegate这个protocol的原因。&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Show statistics such as fps and timing information&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showsStatistics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Create a new scene&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;art.scnassets/ship.scn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;//将场景添加到视图中去。&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;//视图即将被显示的时候调用。&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewWillAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWillAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Create a session configuration&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARWorldTrackingConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Run the view's session&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewWillDisappear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWillDisappear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Pause the view's session&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// MARK: - ARSCNViewDelegate&lt;/span&gt;
    
&lt;span class=&quot;cm&quot;&gt;/*
    // Override to create and configure nodes for anchors added to the view's session.
    func renderer(_ renderer: SCNSceneRenderer, nodeFor anchor: ARAnchor) -&amp;gt; SCNNode? {
        let node = SCNNode()
     
        return node
    }
*/&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFailWithError&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Present an error message to the user&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sessionWasInterrupted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Inform the user that the session has been interrupted, for example, by presenting an overlay&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sessionInterruptionEnded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Reset tracking and/or remove existing anchors if consistent tracking is required&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;arscnview&quot;&gt;ARSCNView&lt;/h3&gt;
&lt;p&gt;该view是arkit中的一部分，是为了在照相机镜头捕捉到的真实世界的图像中叠加的3d事物。&lt;/p&gt;

&lt;p&gt;前面说过，这个view是两个世界的叠加，一个是现实世界，一个是虚拟世界。现实世界是背景，而虚拟世界是前景。在这个view中，两个世界的坐标系统是对应的，这也许就是为什么AR中能产生锚定的效果。而且，随着手机的移动，虚拟的世界也会跟着调整。&lt;/p&gt;

&lt;h3 id=&quot;delegate&quot;&gt;delegate&lt;/h3&gt;
&lt;p&gt;在代码的很多地方都能看到delegate。delegate指向的是一个用户自己提供的对象。这个对象在3d场景渲染的过程中（有很多的步骤），会收到一些特定的事件通知。这就给用户提供了一个控制渲染的机会（添加自己想要渲染的内容，或者做一些基于每一帧画幅的逻辑处理）。&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;ARSCNView&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;@IBOutlet&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;关于怎么写自己的delegate&quot;&gt;关于怎么写自己的delegate&lt;/h3&gt;
&lt;p&gt;在上面的示例项目中，有一段是要自己来实现的（注释掉了），于是我就参考其他的例子，借鉴了一下人家是如何实现的。&lt;/p&gt;

&lt;p&gt;这个项目来自于ARKit2.0-Prototype。&lt;/p&gt;

&lt;p&gt;接下来我们就来看下这段代码的意思。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// MARK: - ARSCNViewDelegate&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//根据官方文档的解释，这个函数是在节点被添加到锚点完成之后会调用的函数。&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNSceneRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didAdd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARAnchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alertController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIAlertController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Found Object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This is your object.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;preferredStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You've pressed default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alertController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alertController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Override to create and configure nodes for anchors added to the view's session.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//一下这段代码就是apple自带的默认代码，参数，甚至包括第一行let代码都不要该，我们只需要实现后面的代码即可。这段代码用来创建一个节点。&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNSceneRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodeFor&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARAnchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//这个anchor是外面传进来的参数。as?向下转型（基类转子类，与as!的差别在于，如果转换失败，将会转变成nil）。所以这里的逻辑是，先尝试从ARAnhor转成ARImageAnchor，如果转成功了，就继续处理，如果没有转成功的话，就走到else分支上去了。&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//ARImageAnchor: 代表一张图片的锚点。&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageAnchor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anchor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARImageAnchor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//先创建一个平面，该平面可以设置它的宽度和高度，只有一面可见。它是scenekit的一部分。&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;plane&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageAnchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;referenceImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;physicalSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageAnchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;referenceImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;physicalSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//firstMaterial?: Optional Chaining, firstMaterial可能为空，如果为空的话就直接退出，不会造成runtime error。&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstMaterial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diffuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//SCNMaterial： 一个material就确定了如何渲染一个3d物体，它规定了颜色和相关的文字。&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;material&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNMaterial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//diffuse光照条件。&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diffuse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewObj&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;materials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;planeNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;planeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eulerAngles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addChildNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;planeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//planeNode.eulerAngles = SCNVector3Make(0,0,Float(-M_PI_2))&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shipScene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;art.scnassets/ArrowB.scn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shipNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shipScene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childNodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;shipNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;SCNVector3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;positionFromTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;shipNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shipNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sceneView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addChildNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shipNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;renderer&quot;&gt;renderer&lt;/h3&gt;
&lt;p&gt;这个是协议ARSCNViewDelegate提供的接口函数，从ARSCNViewDelegate的代码中可以看到，它有好几套同名接口，只是参数不同，使用的场景也不同。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在给定的锚点使用定制化的节点（node）。该节点会被在场景中被创建出来。这个实现就是上述代码示例中的第二个renderer的实现。
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNSceneRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodeFor&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARAnchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;在一个新的节点被映射到给定锚点的时候该函数会被调用。注意那个didAdd的符号。
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNSceneRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didAdd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARAnchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;锚点更新了，节点也需要更新，此时该函数会被调用。
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNSceneRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;willUpdate&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARAnchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;锚点更新了，节点也更新了，此时该函数会被调用。
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNSceneRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didUpdate&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARAnchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;当节点被从制定的锚点上被移除了，此时该函数会被调用。
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNSceneRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didRemove&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SCNNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ARAnchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aranchor&quot;&gt;ARAnchor&lt;/h3&gt;
&lt;p&gt;ARAnchor代表在一个3d场景中的位置和朝向。在这个类的内部，有个矩阵，该矩阵定义了rotation是怎么做的。&lt;/p&gt;</content><author><name></name></author><summary type="html">起点</summary></entry><entry><title type="html">第一篇博客!</title><link href="/eric/jekyll/update/2019/08/03/welcome-to-jekyll.html" rel="alternate" type="text/html" title="第一篇博客!" /><published>2019-08-03T06:00:00+00:00</published><updated>2019-08-03T06:00:00+00:00</updated><id>/eric/jekyll/update/2019/08/03/welcome-to-jekyll</id><content type="html" xml:base="/eric/jekyll/update/2019/08/03/welcome-to-jekyll.html">&lt;p&gt;一天，偶然的机会中，看到同学的朋友圈发了条消息。那是一张证书的照片，一张coursera颁发的证书，一张机器学习的证书。就是这么一张证书，把我给点燃了，我要学习人工智能。从哪儿开始呢？就从获得那张证书开始。&lt;/p&gt;

&lt;p&gt;那张证书是吴恩达的机器学习入门课给发的。网上看过不少资料，都极力的推荐使用这门课作为机器学习的入门课。原因在于，这门课很浅显，没有复杂的公式推导，课程中间会穿插小练习，课后会有作业，都是玩具性质的小练习。&lt;/p&gt;

&lt;p&gt;看到这些介绍，没有不动心的，动手呗。&lt;/p&gt;

&lt;p&gt;在看这个教程之前，也看了些机器学习相关的科普类的文章，书籍，所以对机器学习有那么点模糊的概念，但也就这点概念了。按照我的理解，机器学习就是给机器数据，让它从中发现点什么，而且发现的这点东西还能用来做预测。&lt;/p&gt;

&lt;p&gt;就带着这么点资源，我就上路了。&lt;/p&gt;

&lt;p&gt;开始的几节课下来，我有这么个感觉，这些不就是当年我们学习的概率吗？高级点，不就是随机过程吗？样本，总体，均值，方差，回归，熟悉的概念，但依然模糊，这些概念的定义，我基本上是忘光了。工作当中很少用到它们，所以也就注定了，我还是低水平的程序员。&lt;/p&gt;

&lt;p&gt;捡起这些概念，心中有那么点满足和欣慰，这让我对机器学习又多了那么点亲切感，像见到亲人了。&lt;/p&gt;

&lt;p&gt;每堂课，深入浅出，内容很紧凑，没有废话，中间穿插的小练习，只要你刚才听了，一般都是能答出来的，而且现场给反馈，告诉你答对没有。课后的习题，难度层次也比较清晰。如果概念模糊，可以结合讲义一起看，基本也都能答出来。只有得到80分才能过关，一次没过，可以多试几次。其实分数什么的都不重要，关键是你要理解其中的概念。编程题有不少，都是要实操的，但是题目本身很简单，而且还会有hint,这一下子降低了题目的难度。每当屏幕上出现期望输出时，很有成就感。&lt;/p&gt;

&lt;p&gt;每节课都有指定的学习时间，所有的任务需要在规定时间内完成，一般是一个礼拜，所以能坚持走完这个课程，还是需要点自制力的。&lt;/p&gt;

&lt;p&gt;经过3-4个月的时间，课程基本学完，知识点基本都走到。很多概念，也仅仅限于知道有这个概念，至于其背后的原理和数学推导我还是不会。但有了这些知识点之后，再去看机器学习的相关文章，一下子就轻松了很多，不再是像看天书一样，因为我掌握这个领域的基本语言，可以沟通了。而且还掌握了一个我认为整个课程中最重要的概念，cost function，我们的目标就是最小化这个cost function，由此我们就建立了我们的模型（参数调整完毕）。&lt;/p&gt;

&lt;p&gt;证书到手，开心。&lt;/p&gt;

&lt;p&gt;接下来的时间里，我也在思索，后续我该怎么深入。万能的google此时又发挥了它的作用，我找到了一堆链接和推荐，作为后续深入学习的材料。&lt;/p&gt;

&lt;p&gt;大名鼎鼎的CS109,是我现在在啃的内容，三位老师讲的不错，但是太蜻蜓点水，速度也很快，可能还是需要点基础的。&lt;/p&gt;

&lt;p&gt;先啃着吧，实在难以为继，搞些概率统计的书来看看。&lt;/p&gt;</content><author><name></name></author><summary type="html">一天，偶然的机会中，看到同学的朋友圈发了条消息。那是一张证书的照片，一张coursera颁发的证书，一张机器学习的证书。就是这么一张证书，把我给点燃了，我要学习人工智能。从哪儿开始呢？就从获得那张证书开始。</summary></entry></feed>